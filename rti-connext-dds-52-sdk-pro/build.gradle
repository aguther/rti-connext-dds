// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '3.4.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.parse(project.version)
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-5.2.0-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install RTI launcher patch (5.2.0.1)
        commandLine = "$extractionDirectory/rti_connext_dds-5.2.0/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-5.2.0.1-patch-launcher-noarch.rtipkg"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Connext® DDS Professional SDK"
    description = "RTI Connext® DDS is the first connectivity platform designed for the demanding requirements of the Industrial Internet of Things (IIoT). It delivers the low-latency and real-time QoS needed to monitor and control physical-world processes. It provides the non-stop availability and security essential for mission-critical systems. And it complies with the Data Distribution Service (DDS) standard to foster interoperability and an open architecture, slashing lifecycle costs."

    packageGroup = "Development/Tools"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    obsoletes("rti-dds-sdk")

    // we need target libraries to be installed to work
    requires("rti-connext-dds-sdk-target", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    // we provide an SDK
    provides("rti-connext-dds-sdk", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    // add SDK content
    from("$extractionDirectory/rti_connext_dds-5.2.0") {
        exclude "**/rtilauncher.desktop"
        exclude "**/uninstall"
        into ""
    }
    // add desktop file with correct paths
    from("$extractionDirectory/rti_connext_dds-5.2.0") {
        include "**/rtilauncher.desktop"
        filter { String line ->
            line.replace("$extractionDirectory/rti_connext_dds-5.2.0", "$targetDirectory")
        }
        into ""
    }
    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def javaLinkPath               = "/usr/lib/java"
    def javaInstallPath            = "$targetDirectory/lib/java"
    def alternativesPriority       = 1

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtilauncher.desktop", "$targetDirectory/rtilauncher.desktop")

    // links for applications without any alternative
    link("$applicationLinkPath/jms2dds",                "$applicationLauncherPath")
    link("$applicationLinkPath/rtiadminconsole",        "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen_server",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsping",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsprototyper",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsspy",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtilauncher",            "$applicationLauncherPath")
    link("$applicationLinkPath/rtimonitor",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtipersistenceservice",  "$applicationLauncherPath")
    link("$applicationLinkPath/rtipkginstall",          "$applicationLauncherPath")
    link("$applicationLinkPath/rtipssh",                "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecconv",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecord",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecordingconsole",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecsh",               "$applicationLauncherPath")
    link("$applicationLinkPath/rtireplay",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtireplaysh",            "$applicationLauncherPath")
    link("$applicationLinkPath/rtiroutingservice",      "$applicationLauncherPath")
    link("$applicationLinkPath/rtirssh",                "$applicationLauncherPath")
    link("$applicationLinkPath/rtishapesdemo",          "$applicationLauncherPath")

    // this will be called after installation phase
    postInstall """
        # applications
        alternatives --install '$applicationLinkPath/rtiadminconsole'                'rtiadminconsole'         '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationDesktopLinkPath/rtiadminconsole.desktop' 'rtiadminconsole.desktop' '$targetDirectory/rtiadminconsole.desktop'                                                            \\
                     --slave   '$applicationIconLinkPath/rtiadminconsole.png'        'rtiadminconsole.png'     '$targetDirectory/resource/app/app_support/launcher/icons/AdminConsole2_90.png'

        alternatives --install '$applicationLinkPath/rtimonitor'                     'rtimonitor'              '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationDesktopLinkPath/rtimonitor.desktop'      'rtimonitor.desktop'      '$targetDirectory/rtimonitor.desktop'                                                                 \\
                     --slave   '$applicationIconLinkPath/rtimonitor.png'             'rtimonitor.png'          '$targetDirectory/resource/app/app_support/launcher/icons/Monitor3_90.png'

        alternatives --install '$applicationLinkPath/rtipersistenceservice'          'rtipersistenceservice'   '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationLinkPath/rtipssh'                        'rtipssh'                 '$applicationLauncherPath'

        alternatives --install '$applicationLinkPath/rtiroutingservice'              'rtiroutingservice'       '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationLinkPath/rtirssh'                        'rtirssh'                 '$applicationLauncherPath'
    """

    // this will be called after uninstallation phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ '\$1' = '1' ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # applications
        alternatives --remove 'rtiadminconsole'       '$applicationLauncherPath'
        alternatives --remove 'rtimonitor'            '$applicationLauncherPath'
        alternatives --remove 'rtipersistenceservice' '$applicationLauncherPath'
        alternatives --remove 'rtiroutingservice'     '$applicationLauncherPath'
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'clean', 'buildRpm'