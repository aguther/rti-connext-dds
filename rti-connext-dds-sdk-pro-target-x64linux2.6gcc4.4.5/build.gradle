// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '3.4.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    outputs.dir extractionDirectory

    doLast {
        copy {
            from tarTree(resources.gzip('../packages/RTI_Connext_DDS_Messaging_Target-5.1.0.17-x64Linux2.6gcc4.4.5.tar.gz'))
            into "$extractionDirectory"
        }
        copy {
            from tarTree(resources.gzip('../packages/RTI_Monitoring_Library-5.1.0-x64Linux2.6gcc4.4.5.tar.gz'))
            into "$extractionDirectory"
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.parse(project.version)
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Connext® DDS Professional SDK - Target x64Linux2.6gcc4.4.5"
    description = "Target Libraries for x64Linux2.6gcc4.4.5 of RTI Connext® DDS Professional."

    packageGroup = "Development/Tools"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    // we require the SDK to be installed
    requires("rti-connext-dds-sdk", "${parsedVersion.major}.${parsedVersion.minor}", GREATER | EQUAL)
    // -- workaround due to bug in reline rpm -- requires("rti-connext-dds-sdk", "${parsedVersion.major}.${parsedVersion.minor+1}", LESS)

    // this provide tells the SDK RPM that we are an target library package
    provides("rti-connext-dds-sdk-pro-target", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    // the following provides tell us what abi and languages we can serve
    provides("rti-connext-dds(abi)", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    into "$targetDirectory"

    from("$extractionDirectory/ndds.5.1.0") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def javaLinkPath          = "/usr/lib/java"
    def javaInstallPath       = "$targetDirectory/class"
    def libraryLinkPath       = "/usr/lib64"
    def libraryInstallPath    = "$targetDirectory/lib/x64Linux2.6gcc4.4.5"
    def libraryJdkInstallPath = "$targetDirectory/lib/x64Linux2.6gcc4.4.5jdk"
    def alternativesPriority  = 1

    // this will be called after installation phase
    postInstall """
        # libraries
        alternatives --install '$libraryLinkPath/libnddscore.so'             'libnddscore.so'             '$libraryInstallPath/libnddscore.so'             $alternativesPriority \\
                     --slave   '$libraryLinkPath/libnddscd.so'               'libnddscd.so'               '$libraryInstallPath/libnddscd.so'                                     \\
                     --slave   '$libraryLinkPath/libnddscored.so'            'libnddscored.so'            '$libraryInstallPath/libnddscored.so'                                  \\
                     --slave   '$libraryLinkPath/libnddscppd.so'             'libnddscppd.so'             '$libraryInstallPath/libnddscppd.so'                                   \\
                     --slave   '$libraryLinkPath/libnddscpp.so'              'libnddscpp.so'              '$libraryInstallPath/libnddscpp.so'                                    \\
                     --slave   '$libraryLinkPath/libnddsc.so'                'libnddsc.so'                '$libraryInstallPath/libnddsc.so'                                      \\
                     --slave   '$libraryLinkPath/libnddsjavad.so'            'libnddsjavad.so'            '$libraryJdkInstallPath/libnddsjavad.so'                               \\
                     --slave   '$libraryLinkPath/libnddsjava.so'             'libnddsjava.so'             '$libraryJdkInstallPath/libnddsjava.so'                                \\
                     --slave   '$libraryLinkPath/libnddstransporttcpd.so'    'libnddstransporttcpd.so'    '$libraryInstallPath/libnddstransporttcpd.so'                          \\
                     --slave   '$libraryLinkPath/libnddstransporttcp.so'     'libnddstransporttcp.so'     '$libraryInstallPath/libnddstransporttcp.so'                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgcd.so'      'librticonnextmsgcd.so'      '$libraryInstallPath/librticonnextmsgcd.so'                            \\
                     --slave   '$libraryLinkPath/librticonnextmsgcppd.so'    'librticonnextmsgcppd.so'    '$libraryInstallPath/librticonnextmsgcppd.so'                          \\
                     --slave   '$libraryLinkPath/librticonnextmsgcpp.so'     'librticonnextmsgcpp.so'     '$libraryInstallPath/librticonnextmsgcpp.so'                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgc.so'       'librticonnextmsgc.so'       '$libraryInstallPath/librticonnextmsgc.so'                             \\
                     --slave   '$libraryLinkPath/librtimonitoringd.so'       'librtimonitoringd.so'       '$libraryInstallPath/librtimonitoringd.so'                             \\
                     --slave   '$libraryLinkPath/librtimonitoring.so'        'librtimonitoring.so'        '$libraryInstallPath/librtimonitoring.so'                              \\
                     --slave   '$javaLinkPath/nddsjava.jar'                  'nddsjava.jar'               '$javaInstallPath/nddsjava.jar'                                        \\
                     --slave   '$javaLinkPath/nddsjavad.jar'                 'nddsjavad.jar'              '$javaInstallPath/nddsjavad.jar'                                       \\
                     --slave   '$javaLinkPath/rticonnextmsgd.jar'            'rticonnextmsgd.jar'         '$javaInstallPath/rticonnextmsgd.jar'                                  \\
                     --slave   '$javaLinkPath/rticonnextmsg.jar'             'rticonnextmsg.jar'          '$javaInstallPath/rticonnextmsg.jar'                                   \\

        # update ld configuration
        ldconfig
    """

    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # libraries
        alternatives --remove 'libnddscore.so' '$libraryInstallPath/libnddscore.so'

        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'clean', 'buildRpm'