// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '4.0.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    if (parsedVersion.patch > 0) {
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.run"
    }
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install patch(es) with RTI installer (if applicable)
        if (parsedVersion.patch > 0) {
            // install host patch
            commandLine = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.run"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()
        }

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/persistence-service"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Persistence Service"
    description = "Persistence Service saves DDS data samples so they can be delivered to subscribing applications that join the system at a later timeâ€”even if the publishing application has already terminated."

    packageGroup = "Applications/Communications"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // we provide the persistence service
    provides("rti-connext-dds-persistence-service", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", EQUAL)
    conflicts("rti-connext-dds-persistence-service", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", GREATER | LESS)

    from("$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}") {
        include "bin/rtipersistenceservice"
        include "bin/rtipssh"
        include "doc/manuals/persistence_service/*"
        include "resource/app/bin/x64Linux2.6gcc4.1.1/rtipersistenceservice"
        include "resource/app/bin/x64Linux2.6gcc4.1.1/rtipssh"
        include "resource/schema/rti_persistence_service.*"
        include "resource/scripts/*"
        exclude "resource/scripts/rticommon_config.sh"
        include "resource/xml/RTI_PERSISTENCE_SERVICE.xml"
        into ""
    }
    from("$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}") {
        include "resource/scripts/rticommon_config.sh"
        filter { String line ->
            line.replace("# copy_examples=false", "copy_examples=false\ncopy_workspace=false")
        }
        into ""
    }
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def alternativesPriority       = 10

    // this will be called after installation phase
    postInstall """
        # persistence service
        alternatives --install '$applicationLinkPath/rtipersistenceservice' 'rtipersistenceservice' '$applicationLauncherPath' $alternativesPriority \\
                     --slave   '$applicationLinkPath/rtipssh'               'rtipssh'               '$applicationLauncherPath'                       \\

        # enable auto configuration
        alternatives --auto 'rtipersistenceservice'

        # update ld configuration
        ldconfig
    """

    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # libraries
        alternatives --remove 'rtipersistenceservice' '$applicationLauncherPath'

        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'