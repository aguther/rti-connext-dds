apply from: "../prepareRtiHost.gradle"

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/persistence-service"

ospackage {
    summary = "RTI Persistence Service"
    description = "Persistence Service saves DDS data samples so they can be delivered to subscribing applications that join the system at a later timeâ€”even if the publishing application has already terminated."

    packageGroup = "Applications/Communications"

    into "$targetDirectory"

    // runtime dependencies
    requires("libc.so.6()(64bit)")
    requires("libdl.so.2()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libnsl.so.1()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")

    // we provide the persistence service
    provides("rti-connext-dds-persistence-service", "${project.version}", EQUAL)

    // conflicts with SDK
    conflicts("rti-connext-dds-sdk-pro")

    // update old major versions
    obsoletes("rti-connext-dds-52-persistence-service")
    obsoletes("rti-connext-dds-53-persistence-service")

    // add persistence service
    from("$extractionDirectoryResult") {
        include "bin/rtipersistenceservice"
        include "bin/rtipssh"
        include "doc/manuals/persistence_service/*"
        include "resource/app/bin/x64Linux2.6gcc4.4.5/rtipersistenceservice"
        include "resource/app/bin/x64Linux2.6gcc4.4.5/rtipssh"
        include "resource/app/lib/**"
        include "resource/schema/rti_persistence_service.*"
        include "resource/schema/definitions/rti_dds_qos_profiles_definitions.xsd"
        include "resource/schema/definitions/rti_dist_logger_definitions.xsd"
        include "resource/scripts/*"
        exclude "resource/scripts/rticommon_config.sh"
        include "resource/xml/RTI_PERSISTENCE_SERVICE.xml"
        into ""
    }
    from("$extractionDirectoryResult") {
        include "resource/scripts/rticommon_config.sh"
        filter { String line ->
            line.replace("# copy_examples=false", "copy_examples=false\ncopy_workspace=false")
        }
        into ""
    }
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn prepareRtiHost

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"

    // persistence service
    link("$applicationLinkPath/rtipersistenceservice", "$applicationLauncherPath")
    link("$applicationLinkPath/rtipssh",               "$applicationLauncherPath")
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
