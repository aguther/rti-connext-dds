import org.apache.tools.ant.taskdefs.condition.Os

ext.parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
ext.parsedVersionPrepatch = VersionNumber.withPatchNumber().parse(project.versionPrePatch)
ext.parsedVersionInterPatch = VersionNumber.withPatchNumber().parse(project.versionInterPatch)
ext.extractionDirectory = "$buildDir/extracted"
ext.extractionDirectoryResult = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"

ext.rtipkginstall = ""
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
  rtipkginstall = "$extractionDirectoryResult/bin/rtipkginstall.bat"
} else {
  rtipkginstall = "$extractionDirectoryResult/bin/rtipkginstall"
}

task prepareRtiHostSources {
  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-src.zip"
  outputs.file new File("$buildDir/$name")

  doLast {
    // extract folder
    copy {
      from zipTree("$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-src.zip")
      into "$extractionDirectory"
    }

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = "Done"
  }
}

task prepareRtiPackageHost {
  dependsOn prepareRtiHostSources

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-${rtiPlatform}.exe"
  } else {
    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-${rtiPlatform}.run"
  }
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install SDK into extraction directory (with prefix)
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-${rtiPlatform}.exe --mode unattended --unattendedmodeui minimalWithDialogs --prefix $extractionDirectory"
    } else {
      commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-${rtiPlatform}.run --mode unattended --prefix $extractionDirectory"
    }
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // remove local launcher file
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      delete file ("${System.env['ProgramData']}/Microsoft/Windows/Start Menu/Programs/RTI Connext DDS ${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}")
      delete file ("${System.properties['user.home']}/Documents/rti_workspace")
    } else {
      delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiPackageHostPrePatch {
  dependsOn prepareRtiPackageHost

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersionPrepatch.major}.${parsedVersionPrepatch.minor}.${parsedVersionPrepatch.micro}.${parsedVersionPrepatch.patch}-pro-host-${rtiPlatform}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install host patch
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersionPrepatch.major}.${parsedVersionPrepatch.minor}.${parsedVersionPrepatch.micro}.${parsedVersionPrepatch.patch}-pro-host-${rtiPlatform}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiPackageHostInterPatch {
  dependsOn prepareRtiPackageHostPrePatch

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersionInterPatch.major}.${parsedVersionInterPatch.minor}.${parsedVersionInterPatch.micro}.${parsedVersionInterPatch.patch}-pro-host-${rtiPlatform}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install host patch
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersionInterPatch.major}.${parsedVersionInterPatch.minor}.${parsedVersionInterPatch.micro}.${parsedVersionInterPatch.patch}-pro-host-${rtiPlatform}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiPackageHostPatch {
  dependsOn prepareRtiPackageHostInterPatch

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-${rtiPlatform}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install host patch
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-${rtiPlatform}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiHost {
  if (parsedVersion.patch > 0) {
    dependsOn prepareRtiPackageHostPatch
  } else {
    dependsOn prepareRtiPackageHost
  }
}
