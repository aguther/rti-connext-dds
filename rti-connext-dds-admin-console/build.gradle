// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '4.0.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
def extractionDirectory = "$buildDir/extracted"
def extractionDirectoryResult = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/admin-console"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Administration Console"
    description = "RTI Administration Console is a centralized tool for monitoring and administering your distributed system. Admin Console collects various system health information and summarizes it in one easy-to-read table."

    packageGroup = "Development/Tools"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // admin console requires a license to work
    requires("rti-connext-dds-license")

    // we provide the admin console
    provides("rti-connext-dds-admin-console", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", EQUAL)
    conflicts("rti-connext-dds-admin-console", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", GREATER | LESS)

    // add admin console
    from("$extractionDirectoryResult") {
        include "bin/rtiadminconsole"
        include "doc/manuals/admin_console/*"
        include "resource/app/app_support/admin_console/**"
        include "resource/app/app_support/launcher/icons/admin_32x32.gif"
        include "resource/app/app_support/launcher/icons/Admin90.gif"
        include "resource/app/app_support/launcher/icons/AdminConsole2_32x32.png"
        include "resource/app/app_support/launcher/icons/AdminConsole2_90.png"
        include "resource/app/bin/x64Linux2.6gcc4.1.1/RTI_AdminConsole"
        include "resource/app/eclipse/**"
        include "resource/app/jre/**"
        include "resource/app/lib/*/libndds*.so"
        include "resource/app/lib/*/lib*monitoring.so"
        include "resource/scripts/*"
        exclude "resource/scripts/rticommon_config.sh"
        include "resource/xml/admin_console_example_profiles.xml"
        into ""
    }
    from("$extractionDirectoryResult") {
        include "resource/scripts/rticommon_config.sh"
        filter { String line ->
            line.replace("# copy_examples=false", "copy_examples=false\ncopy_workspace=false")
        }
        into ""
    }
    // add desktop links
    from("src/main/resources/desktop-files") {
        into ""
    }
    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def alternativesPriority       = 10

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtiadminconsole.desktop", "$targetDirectory/rtiadminconsole.desktop")

    // this will be called after installation phase
    postInstall """
        # applications
        alternatives --install '$applicationLinkPath/rtiadminconsole'                'rtiadminconsole'         '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationDesktopLinkPath/rtiadminconsole.desktop' 'rtiadminconsole.desktop' '$targetDirectory/rtiadminconsole.desktop'                                                            \\
                     --slave   '$applicationIconLinkPath/rtiadminconsole.xpm'        'rtiadminconsole.xpm'     '$targetDirectory/resource/app/app_support/admin_console/x64Linux/icon.xpm'

        # enable auto configuration
        alternatives --auto 'rtiadminconsole'
    """

    // this will be called after uninstallation phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # applications
        alternatives --remove 'rtiadminconsole' '$applicationLauncherPath'
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
