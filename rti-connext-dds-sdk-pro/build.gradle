// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '3.4.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.parse(project.version)
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    outputs.dir extractionDirectory

    doLast {
        copy {
            from tarTree(resources.gzip('../packages/RTI_Connext_DDS_Messaging_Host-5.1.0.17-x64Linux.tar.gz'))
            into "$extractionDirectory"
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Connext® DDS Professional SDK"
    description = "RTI Connext® DDS Professional is the first connectivity platform designed for the demanding requirements of the Industrial Internet of Things (IIoT). It delivers the low-latency and real-time QoS needed to monitor and control physical-world processes. It provides the non-stop availability and security essential for mission-critical systems. And it complies with the Data Distribution Service (DDS) standard to foster interoperability and an open architecture, slashing lifecycle costs."

    packageGroup = "Development/Tools"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    obsoletes("rti-dds-sdk")

    // we need target libraries to be installed to work
    requires("rti-connext-dds-sdk-pro-target", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    // we provide an SDK
    provides("rti-connext-dds-sdk", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    // add SDK content
    from("$extractionDirectory/ndds.5.1.0") {
        into ""
    }
    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"

    // links for applications without any alternative
    link("$applicationLinkPath/rtiddsgen",         "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen2",        "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen2_server", "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsping",        "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsprototyper",  "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsspy",         "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsversion",     "$applicationLauncherPath")
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'clean', 'buildRpm'