apply from: "../prepareRtiHost.gradle"

task prepareRtiPackageTarget {
  dependsOn prepareRtiPackageHost

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}-pro-target-${rtiTarget}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install target libraries with RTI installer
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-target-${rtiTarget}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiPackageTargetPatch22 {
  dependsOn prepareRtiPackageTarget
  dependsOn prepareRtiPackageHostPatch22

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion22.major}.${parsedVersion22.minor}.${parsedVersion22.micro}.${parsedVersion22.patch}-pro-target-${rtiTarget}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install target libraries with RTI installer
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersion22.major}.${parsedVersion22.minor}.${parsedVersion22.micro}.${parsedVersion22.patch}-pro-target-${rtiTarget}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiPackageTargetPatch24 {
  dependsOn prepareRtiPackageTargetPatch22
  dependsOn prepareRtiPackageHostPatch24

  inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
  outputs.file new File("$buildDir/$name")

  doLast {
    // variables
    def commandLine
    def processObject

    // install target libraries with RTI installer
    commandLine = "${rtipkginstall} -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
    processObject = commandLine.execute()
    processObject.in.eachLine { line -> logger.info(line) }
    processObject.err.eachLine { line -> logger.error(line) }
    processObject.waitFor()
    assert !processObject.exitValue()

    // write file to tell this task has been done successfully
    def outputFile = new File("$buildDir/$name")
    outputFile.text = processObject.exitValue()
  }
}

task prepareRtiHostWithTarget {
  if (parsedVersion.patch > 0) {
    dependsOn prepareRtiPackageTargetPatch24
    // targets must run after host packages
    prepareRtiPackageTarget.mustRunAfter prepareRtiPackageHost
    prepareRtiPackageTargetPatch22.mustRunAfter prepareRtiPackageHostPatch22
    prepareRtiPackageTargetPatch24.mustRunAfter prepareRtiPackageHostPatch24
    // host patches must run in right order
    prepareRtiPackageHostPatch16.mustRunAfter prepareRtiPackageTarget
    prepareRtiPackageHostPatch22.mustRunAfter prepareRtiPackageHostPatch16
    prepareRtiPackageHostPatch24.mustRunAfter prepareRtiPackageTargetPatch22
  } else {
    dependsOn prepareRtiPackageTarget
  }
}
