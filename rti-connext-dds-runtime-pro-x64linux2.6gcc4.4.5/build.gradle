// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '3.4.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    outputs.dir extractionDirectory

    doLast {
        copy {
            from tarTree(resources.gzip('../packages/RTI_Connext_DDS_Messaging_Target-5.1.0.17-x64Linux2.6gcc4.4.5.tar.gz'))
            into "$extractionDirectory"
        }
        copy {
            from tarTree(resources.gzip('../packages/RTI_Monitoring_Library-5.1.0-x64Linux2.6gcc4.4.5.tar.gz'))
            into "$extractionDirectory"
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.parse(project.version)
def targetDirectory = "/opt/rti/connext-dds/runtime/x64Linux2.6gcc4.4.5"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Connext® DDS - Runtime x64Linux2.6gcc4.4.5"
    description = "Runtime Libraries for x64Linux2.6gcc4.4.5 of RTI Connext® DDS."

    packageGroup = "Development/Tools"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // the following provides tell us what abi and languages we can serve
    provides("rti-connext-dds(abi)", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${parsedVersion.major}.${parsedVersion.minor}", EQUAL)

    // add java libraries
    from("$extractionDirectory/ndds.5.1.0/class") {
        include "**/nddsjava.jar"
        include "**/rticonnextmsg.jar"
        into "java"
    }
    // add native runtime libraries
    from("$extractionDirectory/ndds.5.1.0/lib/x64Linux2.6gcc4.4.5") {
        include "**/*.so"
        exclude "**/*d.*"
        into "lib"
    }
    // add java <> native adapter library
    from("$extractionDirectory/ndds.5.1.0/lib/x64Linux2.6gcc4.4.5jdk") {
        include "**/libnddsjava.so"
        into "lib"
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def javaLinkPath         = "/usr/lib/java"
    def javaInstallPath      = "$targetDirectory/java"
    def libraryLinkPath      = "/usr/lib64"
    def libraryInstallPath   = "$targetDirectory/lib"
    def alternativesPriority = 10

    // this will be called after installation phase
    postInstall """
        # libraries
        alternatives --install '$libraryLinkPath/libnddscore.so'             'libnddscore.so'             '$libraryInstallPath/libnddscore.so'             $alternativesPriority \\
                     --slave   '$libraryLinkPath/libnddscpp.so'              'libnddscpp.so'              '$libraryInstallPath/libnddscpp.so'                                    \\
                     --slave   '$libraryLinkPath/libnddsc.so'                'libnddsc.so'                '$libraryInstallPath/libnddsc.so'                                      \\
                     --slave   '$libraryLinkPath/libnddsjava.so'             'libnddsjava.so'             '$libraryInstallPath/libnddsjava.so'                                   \\
                     --slave   '$libraryLinkPath/libnddstransporttcp.so'     'libnddstransporttcp.so'     '$libraryInstallPath/libnddstransporttcp.so'                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgcpp.so'     'librticonnextmsgcpp.so'     '$libraryInstallPath/librticonnextmsgcpp.so'                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgc.so'       'librticonnextmsgc.so'       '$libraryInstallPath/librticonnextmsgc.so'                             \\
                     --slave   '$libraryLinkPath/librtimonitoring.so'        'librtimonitoring.so'        '$libraryInstallPath/librtimonitoring.so'                              \\
                     --slave   '$javaLinkPath/nddsjava.jar'                  'nddsjava.jar'               '$javaInstallPath/nddsjava.jar'                                        \\
                     --slave   '$javaLinkPath/rticonnextmsg.jar'             'rticonnextmsg.jar'          '$javaInstallPath/rticonnextmsg.jar'                                   \\

        # update ld configuration
        ldconfig
    """

    // this will be called after uninstallation phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # libraries
        alternatives --remove 'libnddscore.so' '$libraryInstallPath/libnddscore.so'

        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'clean', 'buildRpm'