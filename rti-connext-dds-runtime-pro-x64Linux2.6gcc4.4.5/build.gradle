apply from: "../prepareRtiHostWithTarget.gradle"

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/runtime/${rtiTarget}"

ospackage {
    summary = "RTI Connext® DDS Professional - Runtime ${rtiTarget}"
    description = "Runtime Libraries for ${rtiTarget} of RTI Connext® DDS Professional."

    packageGroup = "Development/Tools"

    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("chkconfig")
    requires("jpackage-utils")

    // we provide the runtime
    provides("rti-connext-dds-runtime-pro", "${project.version}", EQUAL)
    provides("rti-connext-dds(abi)", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-distlog", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-messaging", "${project.version}", EQUAL)

    // conflicts with SDK
    conflicts("rti-connext-dds-sdk-pro")

    // update old major versions
    obsoletes("rti-connext-dds-52-runtime-pro-x64Linux2.6gcc4.4.5")

    // add java libraries
    from("$extractionDirectoryResult/lib/java") {
        exclude "**/${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}*"
        exclude "**/*d.*"
        include "**/distlog*.jar"
        include "**/nddsjava.jar"
        include "**/rticonnextmsg.jar"
        into "java"
    }
    // add native runtime libraries
    from("$extractionDirectoryResult/lib/${rtiTarget}") {
        exclude "**/${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}*"
        exclude "**/librtiroutingservice.so"
        exclude "**/librtirs*.so"
        exclude "**/*d.*"
        include "**/*.so"
        into "lib"
    }
}

buildRpm {
    dependsOn prepareRtiHostWithTarget

    // define local installation path for links
    def javaLinkPath         = "/usr/lib/java"
    def javaInstallPath      = "$targetDirectory/java"
    def libraryLinkPath      = "/usr/lib64"
    def libraryInstallPath   = "$targetDirectory/lib"

    // libraries
    link("$libraryLinkPath/libnddscore.so",          "$libraryInstallPath/libnddscore.so")
    link("$libraryLinkPath/libnddsc.so",             "$libraryInstallPath/libnddsc.so")
    link("$libraryLinkPath/libnddscpp.so",           "$libraryInstallPath/libnddscpp.so")
    link("$libraryLinkPath/libnddscpp2.so",          "$libraryInstallPath/libnddscpp2.so")
    link("$libraryLinkPath/libnddsjava.so",          "$libraryInstallPath/libnddsjava.so")
    link("$libraryLinkPath/libnddstransporttcp.so",  "$libraryInstallPath/libnddstransporttcp.so")
    link("$libraryLinkPath/librticonnextmsgc.so",    "$libraryInstallPath/librticonnextmsgc.so")
    link("$libraryLinkPath/librticonnextmsgcpp.so",  "$libraryInstallPath/librticonnextmsgcpp.so")
    link("$libraryLinkPath/librtidlc.so",            "$libraryInstallPath/librtidlc.so")
    link("$libraryLinkPath/librtidlcpp.so",          "$libraryInstallPath/librtidlcpp.so")
    link("$libraryLinkPath/librtimonitoring.so",     "$libraryInstallPath/librtimonitoring.so")
    link("$javaLinkPath/distlog.jar",                "$javaInstallPath/distlog.jar")
    link("$javaLinkPath/distlogdatamodel.jar",       "$javaInstallPath/distlogdatamodel.jar")
    link("$javaLinkPath/nddsjava.jar",               "$javaInstallPath/nddsjava.jar")
    link("$javaLinkPath/rticonnextmsg.jar",          "$javaInstallPath/rticonnextmsg.jar")

    // this will be called after installation phase
    postInstall """
        # update ld configuration
        ldconfig
    """

    // this will be called after uninstallation phase
    postUninstall """
        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
