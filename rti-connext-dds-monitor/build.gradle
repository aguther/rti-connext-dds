def parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
def extractionDirectory = "$buildDir/extracted"
def extractionDirectoryResult = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/monitor"

ospackage {
    summary = "RTI Monitor"
    description = "RTI Monitor is a graphical tool that displays monitoring data from RTI ConnextÂ® (formerly RTI Data Distribution Service) applications."

    packageGroup = "Development/Tools"

    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("chkconfig")

    // monitor requires a license to work
    requires("rti-connext-dds-license")

    // we provide the monitor
    provides("rti-connext-dds-monitor", "${project.version}", EQUAL)

    // add monitor
    from("$extractionDirectoryResult") {
        include "bin/rtimonitor"
        include "doc/manuals/monitor/*"
        include "resource/app/app_support/monitor/**"
        include "resource/app/app_support/launcher/icons/monitor_32x32.gif"
        include "resource/app/app_support/launcher/icons/Monitor3_32x32.png"
        include "resource/app/app_support/launcher/icons/Monitor3_90.png"
        include "resource/app/app_support/launcher/icons/Monitor90.gif"
        //include "resource/app/eclipse/**"
        include "resource/app/jre/**"
        include "resource/app/lib/*/distlogdatamodel.jar"
        include "resource/app/lib/*/jcommon*.jar"
        include "resource/app/lib/*/jfreechart*.jar"
        include "resource/app/lib/*/log4j*.jar"
        include "resource/app/lib/*/nddsjava.jar"
        include "resource/app/lib/*/rtiddsmonitorlib.jar"
        include "resource/app/lib/*/rtimonitor.jar"
        include "resource/app/lib/*/swingx*.jar"
        include "resource/app/lib/*/libndds*.so"
        include "resource/app/lib/*/lib*monitoring.so"
        include "resource/scripts/*"
        exclude "resource/scripts/rticommon_config.sh"
        include "resource/xml/RTI_MONITOR_QOS_PROFILES.xml"
        into ""
    }
    from("$extractionDirectoryResult") {
        include "resource/scripts/rticommon_config.sh"
        filter { String line ->
            line.replace("# copy_examples=false", "copy_examples=false\ncopy_workspace=false")
        }
        into ""
    }
    // add desktop links
    from("src/main/resources/desktop-files") {
        into ""
    }
    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def alternativesPriority       = 10

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtimonitor.desktop", "$targetDirectory/rtimonitor.desktop")

    // this will be called after installation phase
    postInstall """
        # applications
        alternatives --install '$applicationLinkPath/rtimonitor'                'rtimonitor'         '$applicationLauncherPath'                                                    $alternativesPriority \\
                     --slave   '$applicationDesktopLinkPath/rtimonitor.desktop' 'rtimonitor.desktop' '$targetDirectory/rtimonitor.desktop'                                                               \\
                     --slave   '$applicationIconLinkPath/rtimonitor.png'        'rtimonitor.png'     '$targetDirectory/resource/app/app_support/launcher/icons/Monitor3_90.png'

        # enable auto configuration
        alternatives --auto 'rtimonitor'
    """

    // this will be called after uninstallation phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # applications
        alternatives --remove 'rtimonitor' '$applicationLauncherPath'
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
