def parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
def extractionDirectory = "$buildDir/extracted"
def extractionDirectoryResult = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}-pro-target-${rtiTarget}.rtipkg"
    if (parsedVersion.patch > 0) {
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch - 1}-pro-host-x64Linux.rtipkg"
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.rtipkg"
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
    }
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install target libraries with RTI installer
        commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-target-${rtiTarget}.rtipkg"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install patch(es) with RTI installer (if applicable)
        if (parsedVersion.patch > 0) {
            // install host patch
            commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch - 1}-pro-host-x64Linux.rtipkg"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()

            // install host patch
            commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.rtipkg"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()

            // install target patch
            commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()
        }

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/runtime/${rtiTarget}"

ospackage {
    summary = "RTI Connext® DDS Professional - Runtime ${rtiTarget}"
    description = "Runtime Libraries for ${rtiTarget} of RTI Connext® DDS Professional."

    packageGroup = "Development/Tools"

    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("chkconfig")
    requires("javapackages-tools")

    // the following provides tell us what abi and languages we can serve
    provides("rti-connext-dds(abi)", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-distlog", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-messaging", "${project.version}", EQUAL)

    // ensure we only install one package of runtime
    provides("rti-connext-dds-runtime-pro", "${project.version}", EQUAL)
    conflicts("rti-connext-dds-runtime-core")

    // add java libraries
    from("$extractionDirectoryResult/lib/java") {
        exclude "**/${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"
        exclude "**/*d.*"
        include "**/distlog*.jar"
        include "**/nddsjava.jar"
        include "**/rticonnextmsg.jar"
        include "**/rtijms.jar"
        into "java"
    }
    // add native runtime libraries
    from("$extractionDirectoryResult/lib/${rtiTarget}") {
        exclude "**/${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"
        exclude "**/librtirs*.so"
        exclude "**/librtiroutingservice.so"
        exclude "**/*d.*"
        include "**/*.so"
        into "lib"
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def javaLinkPath         = "/usr/lib/java"
    def javaInstallPath      = "$targetDirectory/java"
    def libraryLinkPath      = "/usr/lib64"
    def libraryInstallPath   = "$targetDirectory/lib"
    def alternativesPriority = 10

    // this will be called after installation phase
    postInstall """
        # libraries
        alternatives --install '$libraryLinkPath/libnddscore.so'              'libnddscore.so'             '$libraryInstallPath/libnddscore.so'             $alternativesPriority \\
                     --slave   '$libraryLinkPath/libnddsc.so'                 'libnddsc.so'                '$libraryInstallPath/libnddsc.so'                                      \\
                     --slave   '$libraryLinkPath/libnddscpp.so'               'libnddscpp.so'              '$libraryInstallPath/libnddscpp.so'                                    \\
                     --slave   '$libraryLinkPath/libnddscpp2.so'              'libnddscpp2.so'             '$libraryInstallPath/libnddscpp2.so'                                   \\
                     --slave   '$libraryLinkPath/libnddsjava.so'              'libnddsjava.so'             '$libraryInstallPath/libnddsjava.so'                                   \\
                     --slave   '$libraryLinkPath/libnddstransporttcp.so'      'libnddstransporttcp.so'     '$libraryInstallPath/libnddstransporttcp.so'                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgc.so'        'librticonnextmsgc.so'       '$libraryInstallPath/librticonnextmsgc.so'                             \\
                     --slave   '$libraryLinkPath/librticonnextmsgcpp.so'      'librticonnextmsgcpp.so'     '$libraryInstallPath/librticonnextmsgcpp.so'                           \\
                     --slave   '$libraryLinkPath/librtidlc.so'                'librtidlc.so'               '$libraryInstallPath/librtidlc.so'                                     \\
                     --slave   '$libraryLinkPath/librtidlcpp.so'              'librtidlcpp.so'             '$libraryInstallPath/librtidlcpp.so'                                   \\
                     --slave   '$libraryLinkPath/librtimonitoring.so'         'librtimonitoring.so'        '$libraryInstallPath/librtimonitoring.so'                              \\
                     --slave   '$javaLinkPath/distlog.jar'                    'distlog.jar'                '$javaInstallPath/distlog.jar'                                         \\
                     --slave   '$javaLinkPath/distlogdatamodel.jar'           'distlogdatamodel.jar'       '$javaInstallPath/distlogdatamodel.jar'                                \\
                     --slave   '$javaLinkPath/nddsjava.jar'                   'nddsjava.jar'               '$javaInstallPath/nddsjava.jar'                                        \\
                     --slave   '$javaLinkPath/rticonnextmsg.jar'              'rticonnextmsg.jar'          '$javaInstallPath/rticonnextmsg.jar'                                   \\
                     --slave   '$javaLinkPath/rtijms.jar'                     'rtijms.jar'                 '$javaInstallPath/rtijms.jar'                                          \\

        # enable auto configuration
        alternatives --auto 'libnddscore.so'

        # update ld configuration
        ldconfig
    """

    // this will be called after uninstallation phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # libraries
        alternatives --remove 'libnddscore.so' '$libraryInstallPath/libnddscore.so'

        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'