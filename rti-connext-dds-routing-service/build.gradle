// --------------------------------------------------------------------------------------------------------------------
plugins {
    id 'nebula.ospackage' version '3.5.0'
    id 'net.researchgate.release' version '2.3.5'
}

// --------------------------------------------------------------------------------------------------------------------
def parsedVersion = VersionNumber.parse(project.version)
def extractionDirectory = "$buildDir/extracted"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject

        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/routing-service"

ospackage {
    vendor = "Real-Time Innovations (RTI)"
    url = "http://www.rti.com"
    license = "http://www.rti.com/downloads/license-agreement.html"

    summary = "RTI Routing Service"
    description = "Welcome to RTI Routing Service, an out- of-the-box solution for integrating disparate and geo-graphically dispersed systems. It scales RTI ConnextÂ® DDS applications across domains, LANs and WANs, including firewall and NAT traversal."

    packageGroup = "Applications/Communications"

    version = "${project.version}"
    release = "$rpmRelease"
    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // we provide the routing service
    provides("rti-connext-dds-routing-service", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", EQUAL)
    conflicts("rti-connext-dds-routing-service", "${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}", GREATER | LESS)

    // add routing service
    from("$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}") {
        include "bin/rtiroutingservice"
        include "bin/rtirssh"
        include "doc/manuals/routing_service/*"
        include "resource/app/bin/x64Linux2.6gcc4.1.1/rtiroutingservice"
        include "resource/app/bin/x64Linux2.6gcc4.1.1/rtirssh"
        include "resource/app/lib/*/libndds*.so"
        include "resource/app/lib/*/librticonnextmsgc.so"
        include "resource/app/lib/*/librtidlc.so"
        include "resource/app/lib/*/librtirouting*.so"
        include "resource/app/lib/*/librtirs*.so"
        include "resource/app/lib/*/rtirsadapter.jar"
        include "resource/schema/rti_routing_service.*"
        include "resource/scripts/*"
        exclude "resource/scripts/rticommon_config.sh"
        include "resource/xml/RTI_ROUTING_SERVICE.xml"
        into ""
    }
    from("$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}") {
        include "resource/scripts/rticommon_config.sh"
        filter { String line ->
            line.replace("# copy_examples=false", "copy_examples=false\ncopy_workspace=false")
        }
        into ""
    }
    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def javaLinkPath               = "/usr/lib/java"
    def javaInstallPath            = "$targetDirectory/resource/app/lib/java"
    def libraryLinkPath            = "/usr/lib64"
    def libraryInstallPath         = "$targetDirectory/resource/app/lib/x64Linux2.6gcc4.1.1"
    def alternativesPriorityApp    = 10
    def alternativesPriorityLib    = 5

    // this will be called after installation phase
    postInstall """
        # routing service
        alternatives --install '$applicationLinkPath/rtiroutingservice'     'rtiroutingservice'         '$applicationLauncherPath'                      $alternativesPriorityApp \\
                     --slave   '$applicationLinkPath/rtirssh'               'rtirssh'                   '$applicationLauncherPath'                                               \\
                     --slave   '$javaLinkPath/rtirsadapter.jar'             'rtirsadapter.jar'          '$javaInstallPath/rtirsadapter.jar'                                      \\
                     --slave   '$libraryLinkPath/librtiroutingservice.so'   'librtiroutingservice.so'   '$libraryInstallPath/librtiroutingservice.so'                            \\
                     --slave   '$libraryLinkPath/librtirsassigntransf.so'   'librtirsassigntransf.so'   '$libraryInstallPath/librtirsassigntransf.so'                            \\
                     --slave   '$libraryLinkPath/librtirsinfrastructure.so' 'librtirsinfrastructure.so' '$libraryInstallPath/librtirsinfrastructure.so'                          \\
                     --slave   '$libraryLinkPath/librtirsjniadapter.so'     'librtirsjniadapter.so'     '$libraryInstallPath/librtirsjniadapter.so'

        alternatives --install '$libraryLinkPath/libnddscore.so'             'libnddscore.so'            '$libraryInstallPath/libnddscore.so'           $alternativesPriorityLib \\
                     --slave   '$libraryLinkPath/libnddsc.so'                'libnddsc.so'               '$libraryInstallPath/libnddsc.so'                                       \\
                     --slave   '$libraryLinkPath/libnddsjava.so'             'libnddsjava.so'            '$libraryInstallPath/libnddsjava.so'                                    \\
                     --slave   '$libraryLinkPath/libnddstransporttcp.so'     'libnddstransporttcp.so'    '$libraryInstallPath/libnddstransporttcp.so'                            \\
                     --slave   '$libraryLinkPath/librticonnextmsgc.so'       'librticonnextmsgc.so'      '$libraryInstallPath/librticonnextmsgc.so'                              \\
                     --slave   '$libraryLinkPath/librtidlc.so'               'librtidlc.so'              '$libraryInstallPath/librtidlc.so'

        # enable auto configuration
        alternatives --auto 'rtiroutingservice'
        alternatives --auto 'libnddscore.so'

        # update ld configuration
        ldconfig
    """

    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # libraries
        alternatives --remove 'rtiroutingservice' '$applicationLauncherPath'
        alternatives --remove 'libnddscore.so'    '$libraryInstallPath/libnddscore.so'

        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'