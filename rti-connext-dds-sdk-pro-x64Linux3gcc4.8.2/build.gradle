def parsedVersion = VersionNumber.withPatchNumber().parse(project.version)
def extractionDirectory = "$buildDir/extracted"
def extractionDirectoryResult = "$extractionDirectory/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"

task extractPackages {

    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run"
    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}-pro-target-${rtiTarget}.rtipkg"
    if (parsedVersion.patch > 0) {
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.rtipkg"
        inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
    }
    inputs.file "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-src.zip"
    outputs.dir extractionDirectory

    doLast {
        // variables
        def commandLine
        def processObject
 
        // install SDK into extraction directory (with prefix)
        commandLine = "$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-host-x64Linux.run --mode unattended --prefix $extractionDirectory"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install target libraries with RTI installer
        commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-target-${rtiTarget}.rtipkg"
        processObject = commandLine.execute()
        processObject.in.eachLine { line -> logger.info(line) }
        processObject.err.eachLine { line -> logger.error(line) }
        processObject.waitFor()
        assert !processObject.exitValue()

        // install patch(es) with RTI installer (if applicable)
        if (parsedVersion.patch > 0) {
            // install host patch
            commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-host-x64Linux.rtipkg"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()

            // install target patch
            commandLine = "$extractionDirectoryResult/bin/rtipkginstall -u $projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}.${parsedVersion.patch}-pro-target-${rtiTarget}.rtipkg"
            processObject = commandLine.execute()
            processObject.in.eachLine { line -> logger.info(line) }
            processObject.err.eachLine { line -> logger.error(line) }
            processObject.waitFor()
            assert !processObject.exitValue()
        }

        // remove local launcher file
        delete file ("${System.properties['user.home']}/.local/share/applications/rtilauncher.desktop")

        // install sources
        copy {
            from zipTree("$projectDir/../packages/rti_connext_dds-${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}-pro-src.zip")
            into "$extractionDirectory"
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    summary = "RTI Connext® DDS Professional SDK"
    description = "RTI Connext® DDS is the first connectivity platform designed for the demanding requirements of the Industrial Internet of Things (IIoT). It delivers the low-latency and real-time QoS needed to monitor and control physical-world processes. It provides the non-stop availability and security essential for mission-critical systems. And it complies with the Data Distribution Service (DDS) standard to foster interoperability and an open architecture, slashing lifecycle costs."

    packageGroup = "Development/Tools"

    arch = X86_64
    os = LINUX

    user = "root"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libdl.so.2()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libnsl.so.1()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("chkconfig")
    requires("javapackages-tools")

    // we need a license to work
    requires("rti-connext-dds-license")

    // we provide the admin console
    provides("rti-connext-dds-admin-console", "${project.version}", EQUAL)

    // ensure we only install one package of SDK
    provides("rti-connext-dds-sdk-pro", "${project.version}", EQUAL)
    conflicts("rti-connext-dds-sdk-core")

    // the following provides tell us what abi and languages we can serve
    provides("rti-connext-dds(abi)", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-distlog", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-messaging", "${project.version}", EQUAL)
    provides("rti-connext-dds-routing-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-persistence-service", "${project.version}", EQUAL)

    // add SDK content
    from("$extractionDirectoryResult") {
        exclude "**/lib/*/${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.micro}"
        exclude "**/rtilauncher.desktop"
        exclude "**/uninstall"
        exclude "backup"
        into ""
    }

    // add desktop file with correct paths
    from("$extractionDirectoryResult") {
        include "**/rtilauncher.desktop"
        filter { String line ->
            line.replace("$extractionDirectoryResult", "$targetDirectory")
        }
        filter { String line ->
            line.replace("$targetDirectory/bin/rtilauncher", "/usr/bin/rtilauncher")
        }
        into ""
    }

    // add desktop links
    from("src/main/resources/desktop-files") {
        into ""
    }

    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }

    // add sources
    from("$extractionDirectory/ndds${parsedVersion.major}${parsedVersion.minor}${parsedVersion.micro}-src") {
        fileMode 0644
        into "src"
    }
}

buildRpm {
    dependsOn extractPackages

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def javaLinkPath               = "/usr/lib/java"
    def javaInstallPath            = "$targetDirectory/lib/java"
    def libraryLinkPath            = "/usr/lib64"
    def libraryInstallPath         = "$targetDirectory/lib/${rtiTarget}"
    def alternativesPriority       = 1

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtilauncher.desktop", "$targetDirectory/rtilauncher.desktop")

    // links for applications without any alternative
    link("$applicationLinkPath/jms2dds",                "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen_server",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsping",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsprototyper",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsspy",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtilauncher",            "$applicationLauncherPath")
    link("$applicationLinkPath/rtimonitor",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtipkginstall",          "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecconv",             "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecord",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecordingconsole",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecsh",               "$applicationLauncherPath")
    link("$applicationLinkPath/rtireplay",              "$applicationLauncherPath")
    link("$applicationLinkPath/rtireplaysh",            "$applicationLauncherPath")
    link("$applicationLinkPath/rtishapesdemo",          "$applicationLauncherPath")

    // this will be called after install phase
    postInstall """
        # applications
        alternatives --install '$applicationLinkPath/rtiadminconsole'                'rtiadminconsole'            '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationDesktopLinkPath/rtiadminconsole.desktop' 'rtiadminconsole.desktop'    '$targetDirectory/rtiadminconsole.desktop'                                                            \\
                     --slave   '$applicationIconLinkPath/rtiadminconsole.xpm'        'rtiadminconsole.xpm'        '$targetDirectory/resource/app/app_support/admin_console/x64Linux/icon.xpm'

        # routing service
        alternatives --install '$applicationLinkPath/rtiroutingservice'              'rtiroutingservice'          '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationLinkPath/rtirssh'                        'rtirssh'                    '$applicationLauncherPath'                                                                            \\
                     --slave   '$javaLinkPath/rtirsadapter.jar'                      'rtirsadapter.jar'           '$javaInstallPath/rtirsadapter.jar'                                                                   \\
                     --slave   '$libraryLinkPath/librtiroutingservice.so'            'librtiroutingservice.so'    '$libraryInstallPath/librtiroutingservice.so'                                                         \\
                     --slave   '$libraryLinkPath/librtiroutingserviced.so'           'librtiroutingserviced.so'   '$libraryInstallPath/librtiroutingserviced.so'                                                        \\
                     --slave   '$libraryLinkPath/librtirsassigntransf.so'            'librtirsassigntransf.so'    '$libraryInstallPath/librtirsassigntransf.so'                                                         \\
                     --slave   '$libraryLinkPath/librtirsinfrastructure.so'          'librtirsinfrastructure.so'  '$libraryInstallPath/librtirsinfrastructure.so'                                                       \\
                     --slave   '$libraryLinkPath/librtirsinfrastructured.so'         'librtirsinfrastructured.so' '$libraryInstallPath/librtirsinfrastructured.so'                                                      \\
                     --slave   '$libraryLinkPath/librtirsjniadapter.so'              'librtirsjniadapter.so'      '$libraryInstallPath/librtirsjniadapter.so'

        # persistence service
        alternatives --install '$applicationLinkPath/rtipersistenceservice'          'rtipersistenceservice'      '$applicationLauncherPath'                                                      $alternativesPriority \\
                     --slave   '$applicationLinkPath/rtipssh'                        'rtipssh'                    '$applicationLauncherPath'                                                                            \\

        # libraries
        alternatives --install '$libraryLinkPath/libnddscore.so'                     'libnddscore.so'             '$libraryInstallPath/libnddscore.so'                                            $alternativesPriority \\
                     --slave   '$libraryLinkPath/libnddscored.so'                    'libnddscored.so'            '$libraryInstallPath/libnddscored.so'                                                                 \\
                     --slave   '$libraryLinkPath/libnddsc.so'                        'libnddsc.so'                '$libraryInstallPath/libnddsc.so'                                                                     \\
                     --slave   '$libraryLinkPath/libnddscd.so'                       'libnddscd.so'               '$libraryInstallPath/libnddscd.so'                                                                    \\
                     --slave   '$libraryLinkPath/libnddscpp.so'                      'libnddscpp.so'              '$libraryInstallPath/libnddscpp.so'                                                                   \\
                     --slave   '$libraryLinkPath/libnddscpp2.so'                     'libnddscpp2.so'             '$libraryInstallPath/libnddscpp2.so'                                                                  \\
                     --slave   '$libraryLinkPath/libnddscpp2d.so'                    'libnddscpp2d.so'            '$libraryInstallPath/libnddscpp2d.so'                                                                 \\
                     --slave   '$libraryLinkPath/libnddscppd.so'                     'libnddscppd.so'             '$libraryInstallPath/libnddscppd.so'                                                                  \\
                     --slave   '$libraryLinkPath/libnddsjava.so'                     'libnddsjava.so'             '$libraryInstallPath/libnddsjava.so'                                                                  \\
                     --slave   '$libraryLinkPath/libnddsjavad.so'                    'libnddsjavad.so'            '$libraryInstallPath/libnddsjavad.so'                                                                 \\
                     --slave   '$libraryLinkPath/libnddstransporttcp.so'             'libnddstransporttcp.so'     '$libraryInstallPath/libnddstransporttcp.so'                                                          \\
                     --slave   '$libraryLinkPath/libnddstransporttcpd.so'            'libnddstransporttcpd.so'    '$libraryInstallPath/libnddstransporttcpd.so'                                                         \\
                     --slave   '$libraryLinkPath/librticonnextmsgc.so'               'librticonnextmsgc.so'       '$libraryInstallPath/librticonnextmsgc.so'                                                            \\
                     --slave   '$libraryLinkPath/librticonnextmsgcd.so'              'librticonnextmsgcd.so'      '$libraryInstallPath/librticonnextmsgcd.so'                                                           \\
                     --slave   '$libraryLinkPath/librticonnextmsgcpp.so'             'librticonnextmsgcpp.so'     '$libraryInstallPath/librticonnextmsgcpp.so'                                                          \\
                     --slave   '$libraryLinkPath/librticonnextmsgcppd.so'            'librticonnextmsgcppd.so'    '$libraryInstallPath/librticonnextmsgcppd.so'                                                         \\
                     --slave   '$libraryLinkPath/librtidlc.so'                       'librtidlc.so'               '$libraryInstallPath/librtidlc.so'                                                                    \\
                     --slave   '$libraryLinkPath/librtidlcd.so'                      'librtidlcd.so'              '$libraryInstallPath/librtidlcd.so'                                                                   \\
                     --slave   '$libraryLinkPath/librtidlcpp.so'                     'librtidlcpp.so'             '$libraryInstallPath/librtidlcpp.so'                                                                  \\
                     --slave   '$libraryLinkPath/librtidlcppd.so'                    'librtidlcppd.so'            '$libraryInstallPath/librtidlcppd.so'                                                                 \\
                     --slave   '$libraryLinkPath/librtimonitoring.so'                'librtimonitoring.so'        '$libraryInstallPath/librtimonitoring.so'                                                             \\
                     --slave   '$libraryLinkPath/librtimonitoringd.so'               'librtimonitoringd.so'       '$libraryInstallPath/librtimonitoringd.so'                                                            \\
                     --slave   '$javaLinkPath/distlog.jar'                           'distlog.jar'                '$javaInstallPath/distlog.jar'                                                                        \\
                     --slave   '$javaLinkPath/distlogd.jar'                          'distlogd.jar'               '$javaInstallPath/distlogd.jar'                                                                       \\
                     --slave   '$javaLinkPath/distlogdatamodel.jar'                  'distlogdatamodel.jar'       '$javaInstallPath/distlogdatamodel.jar'                                                               \\
                     --slave   '$javaLinkPath/distlogdatamodeld.jar'                 'distlogdatamodeld.jar'      '$javaInstallPath/distlogdatamodeld.jar'                                                              \\
                     --slave   '$javaLinkPath/nddsjava.jar'                          'nddsjava.jar'               '$javaInstallPath/nddsjava.jar'                                                                       \\
                     --slave   '$javaLinkPath/nddsjavad.jar'                         'nddsjavad.jar'              '$javaInstallPath/nddsjavad.jar'                                                                      \\
                     --slave   '$javaLinkPath/rticonnextmsg.jar'                     'rticonnextmsg.jar'          '$javaInstallPath/rticonnextmsg.jar'                                                                  \\
                     --slave   '$javaLinkPath/rticonnextmsgd.jar'                    'rticonnextmsgd.jar'         '$javaInstallPath/rticonnextmsgd.jar'                                                                 \\
                     --slave   '$javaLinkPath/rtijms.jar'                            'rtijms.jar'                 '$javaInstallPath/rtijms.jar'                                                                         \\
                     --slave   '$javaLinkPath/rtijmsd.jar'                           'rtijmsd.jar'                '$javaInstallPath/rtijmsd.jar'

        # enable auto configuration
        alternatives --auto 'rtiadminconsole'
        alternatives --auto 'rtiroutingservice'
        alternatives --auto 'rtipersistenceservice'
        alternatives --auto 'libnddscore.so'

        # update ld configuration
        ldconfig
    """

    // this will be called after uninstall phase
    postUninstall """
        # check if uninstall is due to an upgrade
        if [ \"\$1\" = \"1\" ]; then
            # we are in an upgrade process >> nothing to do
            exit 0
        fi

        # applications
        alternatives --remove 'rtiadminconsole'        '$applicationLauncherPath'
        alternatives --remove 'rtiroutingservice'      '$applicationLauncherPath'
        alternatives --remove 'rtipersistenceservice'  '$applicationLauncherPath'
        alternatives --remove 'libnddscore.so'         '$libraryInstallPath/libnddscore.so'
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
