apply from: "../prepareRtiHostWithTarget.gradle"

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    summary = "RTI Connext® DDS Professional SDK"
    description = "RTI Connext® DDS is the first connectivity platform designed for the demanding requirements of the Industrial Internet of Things (IIoT). It delivers the low-latency and real-time QoS needed to monitor and control physical-world processes. It provides the non-stop availability and security essential for mission-critical systems. And it complies with the Data Distribution Service (DDS) standard to foster interoperability and an open architecture, slashing lifecycle costs."

    packageGroup = "Development/Tools"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libdl.so.2()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libnsl.so.1()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("javapackages-tools")

    // we need a license to work
    requires("rti-connext-dds-license")

    // we provide the sdk ensure we only install one package of SDK
    provides("rti-connext-dds-sdk-pro", "${project.version}", EQUAL)

    // we provide the runtime
    provides("rti-connext-dds(abi)", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-distlog", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-messaging", "${project.version}", EQUAL)

    // we provide the tools
    provides("rti-connext-dds-admin-console", "${project.version}", EQUAL)
    provides("rti-connext-dds-monitor", "${project.version}", EQUAL)
    provides("rti-connext-dds-tools", "${project.version}", EQUAL)

    // we provide the services
    provides("rti-connext-dds-persistence-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-recording-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-replay-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-routing-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-web-integration-service", "${project.version}", EQUAL)

    // update old major versions
    obsoletes("rti-connext-dds-52-sdk-pro-x64Linux3gcc4.8.2")
    obsoletes("rti-connext-dds-53-sdk-pro-x64Linux3gcc4.8.2")

    // add SDK content
    from("$extractionDirectoryResult") {
        exclude "**/rtilauncher.desktop"
        exclude "**/uninstall"
        exclude "backup"
        into ""
    }

    // add desktop file with correct paths
    from("$extractionDirectoryResult") {
        include "**/rtilauncher.desktop"
        filter { String line ->
            line.replace("$extractionDirectoryResult", "$targetDirectory")
        }
        filter { String line ->
            line.replace("$targetDirectory/bin/rtilauncher", "/usr/bin/rtilauncher")
        }
        into ""
    }

    // add desktop links
    from("src/main/resources/desktop-files") {
        into ""
    }

    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }

    // add sources
    from("$extractionDirectory/ndds${parsedVersion.major}${parsedVersion.minor}${parsedVersion.micro}-src") {
        fileMode 0644
        into "src"
    }

    // add environment script file
    from("src/main/resources/environment") {
        include "**/rti-connext-dds-sdk-pro.sh"
        filter { String line ->
            line.replace("/opt/rti/connext-dds/sdk", "$targetDirectory")
        }
        into "/etc/profile.d"
    }
}

buildRpm {
    dependsOn prepareRtiHostWithTarget

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def javaLinkPath               = "/usr/lib/java"
    def javaInstallPath            = "$targetDirectory/lib/java"
    def libraryLinkPath            = "/usr/lib64"
    def libraryInstallPath         = "$targetDirectory/lib/${rtiTarget}"
    def includeLinkPath            = "/usr/include"
    def cmakeLinkPath              = "/usr/share/cmake/Modules"
    def cmakeInstallPath           = "$targetDirectory/resource/cmake"

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtilauncher.desktop", "$targetDirectory/rtilauncher.desktop")

    // links for applications without any alternative
    link("$applicationLinkPath/rtiddsgen",           "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen_server",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsprototyper",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtilauncher",         "$applicationLauncherPath")
    link("$applicationLinkPath/rtipkginstall",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtishapesdemo",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiwanserver",        "$applicationLauncherPath")

    // admin-console
    link("$applicationLinkPath/rtiadminconsole",                "$applicationLauncherPath")
    link("$applicationDesktopLinkPath/rtiadminconsole.desktop", "$targetDirectory/rtiadminconsole.desktop")
    link("$applicationIconLinkPath/rtiadminconsole.xpm",        "$targetDirectory/resource/app/app_support/admin_console/x64Linux/icon.xpm")

    // monitor
    link("$applicationLinkPath/rtimonitor",                "$applicationLauncherPath")
    link("$applicationDesktopLinkPath/rtimonitor.desktop", "$targetDirectory/rtimonitor.desktop")
    link("$applicationIconLinkPath/rtimonitor.png",        "$targetDirectory/resource/app/app_support/launcher/icons/Monitor3_90.png")

    // replay service
    link("$applicationLinkPath/rtireplayservice", "$applicationLauncherPath")
 
    // recording service
    link("$applicationLinkPath/rtirecordingservice",            "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecordingservice_list_tags",  "$applicationLauncherPath")
    link("$applicationLinkPath/rticonverter",                   "$applicationLauncherPath")
    link("$applicationLinkPath/rtixmlconverter",                "$applicationLauncherPath")
    link("$libraryLinkPath/librtirecordingservice.so",          "$libraryInstallPath/librtirecordingservice.so")
    link("$libraryLinkPath/librtirecordingserviced.so",         "$libraryInstallPath/librtirecordingserviced.so")
    link("$libraryLinkPath/librtirecordingservicez.a",          "$libraryInstallPath/librtirecordingservicez.a")
    link("$libraryLinkPath/librtirecordingservicezd.a",         "$libraryInstallPath/librtirecordingservicezd.a")

    // routing service
    link("$applicationLinkPath/rtiroutingservice",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtirssh",                 "$applicationLauncherPath")
    link("$javaLinkPath/rtiroutingserviced.jar",         "$javaInstallPath/rtiroutingserviced.jar")
    link("$javaLinkPath/rtiroutingservice.jar",          "$javaInstallPath/rtiroutingservice.jar")
    link("$javaLinkPath/rtirsadapterd.jar",              "$javaInstallPath/rtirsadapterd.jar")
    link("$javaLinkPath/rtirsadapter.jar",               "$javaInstallPath/rtirsadapter.jar")
    link("$libraryLinkPath/librtijniroutingserviced.so", "$libraryInstallPath/librtijniroutingserviced.so")
    link("$libraryLinkPath/librtijniroutingservice.so",  "$libraryInstallPath/librtijniroutingservice.so")
    link("$libraryLinkPath/librtiroutingserviced.so",    "$libraryInstallPath/librtiroutingserviced.so")
    link("$libraryLinkPath/librtiroutingservice.so",     "$libraryInstallPath/librtiroutingservice.so")
    link("$libraryLinkPath/librtiroutingservicez.a",     "$libraryInstallPath/librtiroutingservicez.a")
    link("$libraryLinkPath/librtiroutingservicezd.a",    "$libraryInstallPath/librtiroutingservicezd.a")
    link("$libraryLinkPath/librtirsassigntransfd.so",    "$libraryInstallPath/librtirsassigntransfd.so")
    link("$libraryLinkPath/librtirsassigntransf.so",     "$libraryInstallPath/librtirsassigntransf.so")
    link("$libraryLinkPath/librtirsinfrastructured.so",  "$libraryInstallPath/librtirsinfrastructured.so")
    link("$libraryLinkPath/librtirsinfrastructure.so",   "$libraryInstallPath/librtirsinfrastructure.so")
    link("$libraryLinkPath/librtirsinfrastructurez.a",   "$libraryInstallPath/librtirsinfrastructurez.a")
    link("$libraryLinkPath/librtirsinfrastructurezd.a",  "$libraryInstallPath/librtirsinfrastructurezd.a")
    link("$libraryLinkPath/librtirsjniadapterd.so",      "$libraryInstallPath/librtirsjniadapterd.so")
    link("$libraryLinkPath/librtirsjniadapter.so",       "$libraryInstallPath/librtirsjniadapter.so")

    // persistence service
    link("$applicationLinkPath/rtipersistenceservice",   "$applicationLauncherPath")
    link("$applicationLinkPath/rtipssh",                 "$applicationLauncherPath")

    // web integration service
    link("$applicationLinkPath/rtiwebintegrationservice", "$applicationLauncherPath")

    // command line tools
    link("$applicationLinkPath/rtiddsping", "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsspy",  "$applicationLauncherPath")

    // libraries
    link("$javaLinkPath/distlogdatamodeld.jar",       "$javaInstallPath/distlogdatamodeld.jar")
    link("$javaLinkPath/distlogdatamodel.jar",        "$javaInstallPath/distlogdatamodel.jar")
    link("$javaLinkPath/distlogd.jar",                "$javaInstallPath/distlogd.jar")
    link("$javaLinkPath/distlog.jar",                 "$javaInstallPath/distlog.jar")
    link("$javaLinkPath/nddsjavad.jar",               "$javaInstallPath/nddsjavad.jar")
    link("$javaLinkPath/nddsjava.jar",                "$javaInstallPath/nddsjava.jar")
    link("$javaLinkPath/rticonnextmsgd.jar",          "$javaInstallPath/rticonnextmsgd.jar")
    link("$javaLinkPath/rticonnextmsg.jar",           "$javaInstallPath/rticonnextmsg.jar")
    link("$libraryLinkPath/liblua.so",                "$libraryInstallPath/liblua.so")
    link("$libraryLinkPath/libnddsc.so",              "$libraryInstallPath/libnddsc.so")
    link("$libraryLinkPath/libnddscd.so",             "$libraryInstallPath/libnddscd.so")
    link("$libraryLinkPath/libnddscore.so",           "$libraryInstallPath/libnddscore.so")
    link("$libraryLinkPath/libnddscored.so",          "$libraryInstallPath/libnddscored.so")
    link("$libraryLinkPath/libnddscorez.a",           "$libraryInstallPath/libnddscorez.a")
    link("$libraryLinkPath/libnddscorezd.a",          "$libraryInstallPath/libnddscorezd.a")
    link("$libraryLinkPath/libnddscpp.so",            "$libraryInstallPath/libnddscpp.so")
    link("$libraryLinkPath/libnddscpp2.so",           "$libraryInstallPath/libnddscpp2.so")
    link("$libraryLinkPath/libnddscpp2d.so",          "$libraryInstallPath/libnddscpp2d.so")
    link("$libraryLinkPath/libnddscpp2z.a",           "$libraryInstallPath/libnddscpp2z.a")
    link("$libraryLinkPath/libnddscpp2zd.a",          "$libraryInstallPath/libnddscpp2zd.a")
    link("$libraryLinkPath/libnddscppd.so",           "$libraryInstallPath/libnddscppd.so")
    link("$libraryLinkPath/libnddscppz.a",            "$libraryInstallPath/libnddscppz.a")
    link("$libraryLinkPath/libnddscppzd.a",           "$libraryInstallPath/libnddscppzd.a")
    link("$libraryLinkPath/libnddscz.a",              "$libraryInstallPath/libnddscz.a")
    link("$libraryLinkPath/libnddsczd.a",             "$libraryInstallPath/libnddsczd.a")
    link("$libraryLinkPath/libnddsjava.so",           "$libraryInstallPath/libnddsjava.so")
    link("$libraryLinkPath/libnddsjavad.so",          "$libraryInstallPath/libnddsjavad.so")
    link("$libraryLinkPath/libnddsmetp.so",           "$libraryInstallPath/libnddsmetp.so")
    link("$libraryLinkPath/libnddsmetpd.so",          "$libraryInstallPath/libnddsmetpd.so")
    link("$libraryLinkPath/libnddsmetpz.a",           "$libraryInstallPath/libnddsmetpz.a")
    link("$libraryLinkPath/libnddsmetpzd.a",          "$libraryInstallPath/libnddsmetpzd.a")
    link("$libraryLinkPath/libnddstransporttcp.so",   "$libraryInstallPath/libnddstransporttcp.so")
    link("$libraryLinkPath/libnddstransporttcpd.so",  "$libraryInstallPath/libnddstransporttcpd.so")
    link("$libraryLinkPath/libnddstransporttcpz.a",   "$libraryInstallPath/libnddstransporttcpz.a")
    link("$libraryLinkPath/libnddstransporttcpzd.a",  "$libraryInstallPath/libnddstransporttcpzd.a")
    link("$libraryLinkPath/librticonnextmsgc.so",     "$libraryInstallPath/librticonnextmsgc.so")
    link("$libraryLinkPath/librticonnextmsgcd.so",    "$libraryInstallPath/librticonnextmsgcd.so")
    link("$libraryLinkPath/librticonnextmsgcpp.so",   "$libraryInstallPath/librticonnextmsgcpp.so")
    link("$libraryLinkPath/librticonnextmsgcpp2.so",  "$libraryInstallPath/librticonnextmsgcpp2.so")
    link("$libraryLinkPath/librticonnextmsgcpp2d.so", "$libraryInstallPath/librticonnextmsgcpp2d.so")
    link("$libraryLinkPath/librticonnextmsgcpp2z.a",  "$libraryInstallPath/librticonnextmsgcpp2z.a")
    link("$libraryLinkPath/librticonnextmsgcpp2zd.a", "$libraryInstallPath/librticonnextmsgcpp2zd.a")
    link("$libraryLinkPath/librticonnextmsgcppd.so",  "$libraryInstallPath/librticonnextmsgcppd.so")
    link("$libraryLinkPath/librticonnextmsgcppz.a",   "$libraryInstallPath/librticonnextmsgcppz.a")
    link("$libraryLinkPath/librticonnextmsgcppzd.a",  "$libraryInstallPath/librticonnextmsgcppzd.a")
    link("$libraryLinkPath/librticonnextmsgcz.a",     "$libraryInstallPath/librticonnextmsgcz.a")
    link("$libraryLinkPath/librticonnextmsgczd.a",    "$libraryInstallPath/librticonnextmsgczd.a")
    link("$libraryLinkPath/librtiddsconnectorlua.so", "$libraryInstallPath/librtiddsconnectorlua.so")
    link("$libraryLinkPath/librtidlc.so",             "$libraryInstallPath/librtidlc.so")
    link("$libraryLinkPath/librtidlcd.so",            "$libraryInstallPath/librtidlcd.so")
    link("$libraryLinkPath/librtidlcpp.so",           "$libraryInstallPath/librtidlcpp.so")
    link("$libraryLinkPath/librtidlcppd.so",          "$libraryInstallPath/librtidlcppd.so")
    link("$libraryLinkPath/librtidlcppz.a",           "$libraryInstallPath/librtidlcppz.a")
    link("$libraryLinkPath/librtidlcppzd.a",          "$libraryInstallPath/librtidlcppzd.a")
    link("$libraryLinkPath/librtidlcz.a",             "$libraryInstallPath/librtidlcz.a")
    link("$libraryLinkPath/librtidlczd.a",            "$libraryInstallPath/librtidlczd.a")
    link("$libraryLinkPath/librtimonitoring.so",      "$libraryInstallPath/librtimonitoring.so")
    link("$libraryLinkPath/librtimonitoringd.so",     "$libraryInstallPath/librtimonitoringd.so")
    link("$libraryLinkPath/librtimonitoringz.a",      "$libraryInstallPath/librtimonitoringz.a")
    link("$libraryLinkPath/librtimonitoringzd.a",     "$libraryInstallPath/librtimonitoringzd.a")
    link("$libraryLinkPath/librtixml2.so",            "$libraryInstallPath/librtixml2.so")
    link("$libraryLinkPath/librtixml2d.so",           "$libraryInstallPath/librtixml2d.so")
    link("$libraryLinkPath/librtixml2z.a",            "$libraryInstallPath/librtixml2z.a")
    link("$libraryLinkPath/librtixml2zd.a",           "$libraryInstallPath/librtixml2zd.a")

    // includes
    link("$includeLinkPath/ndds",                     "$targetDirectory/include/ndds")
    link("$includeLinkPath/persistence",              "$targetDirectory/include/persistence")
    link("$includeLinkPath/recordingservice",         "$targetDirectory/include/recordingservice")
    link("$includeLinkPath/routingservice",           "$targetDirectory/include/routingservice")
    link("$includeLinkPath/rti",                      "$targetDirectory/include/rti")
    link("$includeLinkPath/rti_dl",                   "$targetDirectory/include/rti_dl")

    // cmake
    link("$cmakeLinkPath/FindRTICodeGenerator.cmake", "$cmakeInstallPath/FindRTICodeGenerator.cmake")
    link("$cmakeLinkPath/FindRTIConnextDDS.cmake",    "$cmakeInstallPath/FindRTIConnextDDS.cmake")

    // this will be called after install phase
    postInstall """
        # update ld configuration
        ldconfig
    """

    // this will be called after uninstall phase
    postUninstall """
        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
