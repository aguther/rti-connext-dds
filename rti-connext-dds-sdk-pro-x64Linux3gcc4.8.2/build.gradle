apply from: "../prepareRtiHostWithTarget.gradle"

// --------------------------------------------------------------------------------------------------------------------
def targetDirectory = "/opt/rti/connext-dds/sdk"

ospackage {
    summary = "RTI Connext® DDS Professional SDK"
    description = "RTI Connext® DDS is the first connectivity platform designed for the demanding requirements of the Industrial Internet of Things (IIoT). It delivers the low-latency and real-time QoS needed to monitor and control physical-world processes. It provides the non-stop availability and security essential for mission-critical systems. And it complies with the Data Distribution Service (DDS) standard to foster interoperability and an open architecture, slashing lifecycle costs."

    packageGroup = "Development/Tools"

    into "$targetDirectory"

    // runtime dependencies
    requires("java")
    requires("libc.so.6()(64bit)")
    requires("libdl.so.2()(64bit)")
    requires("libgcc_s.so.1()(64bit)")
    requires("libm.so.6()(64bit)")
    requires("libnsl.so.1()(64bit)")
    requires("libpthread.so.0()(64bit)")
    requires("librt.so.1()(64bit)")
    requires("libstdc++.so.6()(64bit)")

    // requires to base packages
    requires("chkconfig")
    requires("javapackages-tools")

    // we need a license to work
    requires("rti-connext-dds-license")

    // we provide the sdk ensure we only install one package of SDK
    provides("rti-connext-dds-sdk-pro", "${project.version}", EQUAL)

    // we provide the runtime
    provides("rti-connext-dds(abi)", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-c", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-cpp", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-java", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-distlog", "${project.version}", EQUAL)
    provides("rti-connext-dds-runtime-messaging", "${project.version}", EQUAL)

    // we provide the tools
    provides("rti-connext-dds-admin-console", "${project.version}", EQUAL)
    provides("rti-connext-dds-monitor", "${project.version}", EQUAL)
    provides("rti-connext-dds-tools", "${project.version}", EQUAL)

    // we provide the services
    provides("rti-connext-dds-cloud-discovery-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-database-integration-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-persistence-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-recording-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-replay-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-routing-service", "${project.version}", EQUAL)
    provides("rti-connext-dds-web-integration-service", "${project.version}", EQUAL)

    // update old major versions
    obsoletes("rti-connext-dds-52-sdk-pro-x64Linux3gcc4.8.2")

    // add SDK content
    from("$extractionDirectoryResult") {
        exclude "**/rtilauncher.desktop"
        exclude "**/uninstall"
        exclude "backup"
        into ""
    }

    // add desktop file with correct paths
    from("$extractionDirectoryResult") {
        include "**/rtilauncher.desktop"
        filter { String line ->
            line.replace("$extractionDirectoryResult", "$targetDirectory")
        }
        filter { String line ->
            line.replace("$targetDirectory/bin/rtilauncher", "/usr/bin/rtilauncher")
        }
        into ""
    }

    // add desktop links
    from("src/main/resources/desktop-files") {
        into ""
    }

    // add scripts
    from("src/main/resources/scripts") {
        into ""
    }

    // add sources
    from("$extractionDirectory/ndds${parsedVersion.major}${parsedVersion.minor}${parsedVersion.micro}-src") {
        fileMode 0644
        into "src"
    }
}

buildRpm {
    dependsOn prepareRtiHostWithTarget

    // define local installation path for links
    def applicationLinkPath        = "/usr/bin"
    def applicationLauncherPath    = "$targetDirectory/launcher"
    def applicationDesktopLinkPath = "/usr/share/applications"
    def applicationIconLinkPath    = "/usr/share/icons/hicolor/96x96/apps"
    def javaLinkPath               = "/usr/lib/java"
    def javaInstallPath            = "$targetDirectory/lib/java"
    def libraryLinkPath            = "/usr/lib64"
    def libraryInstallPath         = "$targetDirectory/lib/${rtiTarget}"

    // create link to license file
    link("$targetDirectory/rti_license.dat", "/opt/rti/connext-dds/license/rti_license.dat")

    // create desktop link to RTI launcher
    link("$applicationDesktopLinkPath/rtilauncher.desktop", "$targetDirectory/rtilauncher.desktop")

    // links for applications without any alternative
    link("$applicationLinkPath/rtiddsgen",           "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsgen_server",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsprototyper",    "$applicationLauncherPath")
    link("$applicationLinkPath/rtilauncher",         "$applicationLauncherPath")
    link("$applicationLinkPath/rtipkginstall",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecordingconsole", "$applicationLauncherPath")
    link("$applicationLinkPath/rtishapesdemo",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtiwanserver",        "$applicationLauncherPath")

    // admin-console
    link("$applicationLinkPath/rtiadminconsole",                "$applicationLauncherPath")
    link("$applicationDesktopLinkPath/rtiadminconsole.desktop", "$targetDirectory/rtiadminconsole.desktop")
    link("$applicationIconLinkPath/rtiadminconsole.xpm",        "$targetDirectory/resource/app/app_support/admin_console/x64Linux/icon.xpm")

    // monitor
    link("$applicationLinkPath/rtimonitor",                "$applicationLauncherPath")
    link("$applicationDesktopLinkPath/rtimonitor.desktop", "$targetDirectory/rtimonitor.desktop")
    link("$applicationIconLinkPath/rtimonitor.png",        "$targetDirectory/resource/app/app_support/launcher/icons/Monitor3_90.png")

    // replay service
    link("$applicationLinkPath/rtireplay",   "$applicationLauncherPath")
    link("$applicationLinkPath/rtireplaysh", "$applicationLauncherPath")

    // recording service
    link("$applicationLinkPath/rtirecord",  "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecconv", "$applicationLauncherPath")
    link("$applicationLinkPath/rtirecsh",   "$applicationLauncherPath")

    // routing service
    link("$applicationLinkPath/rtiroutingservice",       "$applicationLauncherPath")
    link("$applicationLinkPath/rtirssh",                 "$applicationLauncherPath")
    link("$javaLinkPath/rtirsadapter.jar",               "$javaInstallPath/rtirsadapter.jar")
    link("$javaLinkPath/rtiroutingservice.jar",          "$javaInstallPath/rtiroutingservice.jar")
    link("$libraryLinkPath/librtijniroutingservice.so",  "$libraryInstallPath/librtijniroutingservice.so")
    link("$libraryLinkPath/librtijniroutingserviced.so", "$libraryInstallPath/librtijniroutingserviced.so")
    link("$libraryLinkPath/librtiroutingservice.so",     "$libraryInstallPath/librtiroutingservice.so")
    link("$libraryLinkPath/librtiroutingserviced.so",    "$libraryInstallPath/librtiroutingserviced.so")
    link("$libraryLinkPath/librtirsassigntransf.so",     "$libraryInstallPath/librtirsassigntransf.so")
    link("$libraryLinkPath/librtirsinfrastructure.so",   "$libraryInstallPath/librtirsinfrastructure.so")
    link("$libraryLinkPath/librtirsinfrastructured.so",  "$libraryInstallPath/librtirsinfrastructured.so")
    link("$libraryLinkPath/librtirsjniadapter.so",       "$libraryInstallPath/librtirsjniadapter.so")

    // persistence service
    link("$applicationLinkPath/rtipersistenceservice", "$applicationLauncherPath")
    link("$applicationLinkPath/rtipssh",               "$applicationLauncherPath")

    // cloud discovery service
    link("$applicationLinkPath/rticlouddiscoveryservice", "$applicationLauncherPath")

    // database integration service
    link("$applicationLinkPath/rtirtc_mysql",      "$applicationLauncherPath")
    link("$applicationLinkPath/rtirtc_oracle",     "$applicationLauncherPath")
    link("$applicationLinkPath/rtirtc_postgresql", "$applicationLauncherPath")
    link("$applicationLinkPath/rtirtc_timesten",   "$applicationLauncherPath")

    // web integration service
    link("$applicationLinkPath/rtiwebintegrationservice", "$applicationLauncherPath")

    // command line tools
    link("$applicationLinkPath/rtiddsping", "$applicationLauncherPath")
    link("$applicationLinkPath/rtiddsspy",  "$applicationLauncherPath")

    // libraries
    link("$libraryLinkPath/libnddscore.so",          "$libraryInstallPath/libnddscore.so")
    link("$libraryLinkPath/libnddscored.so",         "$libraryInstallPath/libnddscored.so")
    link("$libraryLinkPath/libnddsc.so",             "$libraryInstallPath/libnddsc.so")
    link("$libraryLinkPath/libnddscd.so",            "$libraryInstallPath/libnddscd.so")
    link("$libraryLinkPath/libnddscpp.so",           "$libraryInstallPath/libnddscpp.so")
    link("$libraryLinkPath/libnddscpp2.so",          "$libraryInstallPath/libnddscpp2.so")
    link("$libraryLinkPath/libnddscpp2d.so",         "$libraryInstallPath/libnddscpp2d.so")
    link("$libraryLinkPath/libnddscppd.so",          "$libraryInstallPath/libnddscppd.so")
    link("$libraryLinkPath/libnddsjava.so",          "$libraryInstallPath/libnddsjava.so")
    link("$libraryLinkPath/libnddsjavad.so",         "$libraryInstallPath/libnddsjavad.so")
    link("$libraryLinkPath/libnddstransporttcp.so",  "$libraryInstallPath/libnddstransporttcp.so")
    link("$libraryLinkPath/libnddstransporttcpd.so", "$libraryInstallPath/libnddstransporttcpd.so")
    link("$libraryLinkPath/librticonnextmsgc.so",    "$libraryInstallPath/librticonnextmsgc.so")
    link("$libraryLinkPath/librticonnextmsgcd.so",   "$libraryInstallPath/librticonnextmsgcd.so")
    link("$libraryLinkPath/librticonnextmsgcpp.so",  "$libraryInstallPath/librticonnextmsgcpp.so")
    link("$libraryLinkPath/librticonnextmsgcppd.so", "$libraryInstallPath/librticonnextmsgcppd.so")
    link("$libraryLinkPath/librtidlc.so",            "$libraryInstallPath/librtidlc.so")
    link("$libraryLinkPath/librtidlcd.so",           "$libraryInstallPath/librtidlcd.so")
    link("$libraryLinkPath/librtidlcpp.so",          "$libraryInstallPath/librtidlcpp.so")
    link("$libraryLinkPath/librtidlcppd.so",         "$libraryInstallPath/librtidlcppd.so")
    link("$libraryLinkPath/librtimonitoring.so",     "$libraryInstallPath/librtimonitoring.so")
    link("$libraryLinkPath/librtimonitoringd.so",    "$libraryInstallPath/librtimonitoringd.so")
    link("$javaLinkPath/distlog.jar",                "$javaInstallPath/distlog.jar")
    link("$javaLinkPath/distlogd.jar",               "$javaInstallPath/distlogd.jar")
    link("$javaLinkPath/distlogdatamodel.jar",       "$javaInstallPath/distlogdatamodel.jar")
    link("$javaLinkPath/distlogdatamodeld.jar",      "$javaInstallPath/distlogdatamodeld.jar")
    link("$javaLinkPath/nddsjava.jar",               "$javaInstallPath/nddsjava.jar")
    link("$javaLinkPath/nddsjavad.jar",              "$javaInstallPath/nddsjavad.jar")
    link("$javaLinkPath/rticonnextmsg.jar",          "$javaInstallPath/rticonnextmsg.jar")
    link("$javaLinkPath/rticonnextmsgd.jar",         "$javaInstallPath/rticonnextmsgd.jar")

    // this will be called after install phase
    postInstall """
        # update ld configuration
        ldconfig
    """

    // this will be called after uninstall phase
    postUninstall """
        # update ld configuration
        ldconfig
    """
}

// --------------------------------------------------------------------------------------------------------------------
defaultTasks 'buildRpm'
